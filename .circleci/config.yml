version: 2
jobs:
  enable_apis:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Store Service Account key
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Setup Google Cloud SDK
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set project $GOOGLE_PROJECT_ID
            gsutil mb gs://gcp-terraform-state-$GOOGLE_PROJECT_ID || true
            gcloud app create --region=us-west2 || true
      - run:
          name: Enabling APIs
          command: ./terraform/enable-apis.sh
      - run:
          name: Enable Audit Logging
          command: ./terraform/enable-audit-logs.sh
      - run:
          name: make sure jq is installed
          command: apt-get install -y jq
      - run:
          name: Enable KMS
          command: ./terraform/enable-kms.sh
      - run:
          name: enable app engine if not already done
          command: gcloud app create || true
      - run:
          name: Enable app to do schema migrations
          command: |
            export PROJECT_NUMBER=$(gcloud projects describe ${GOOGLE_PROJECT_ID} --format=json | jq -r .projectNumber)
            gcloud projects add-iam-policy-binding ${GOOGLE_PROJECT_ID} --member=serviceAccount:${PROJECT_NUMBER}@cloudbuild.gserviceaccount.com --role=roles/editor
  plan_terraform:
    docker:
      - image: hashicorp/terraform:0.11.11
    steps:
      - checkout
      - run:
          name: Store Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Initialize and plan Terraform (check plan out here before approving!)
          command: |
            export TF_VAR_project_id=$GOOGLE_PROJECT_ID
            cd terraform && terraform init -backend-config="bucket=gcp-terraform-state-$GOOGLE_PROJECT_ID" && terraform plan -input=false
  apply_terraform:
    docker:
      - image: hashicorp/terraform:0.11.11
    steps:
      - checkout
      - run:
          name: Store Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Apply Terraform
          command: |
            export TF_VAR_project_id=$GOOGLE_PROJECT_ID
            mkdir /tmp/workspace
            cd terraform && terraform init -backend-config="bucket=gcp-terraform-state-$GOOGLE_PROJECT_ID" && terraform apply -input=false -auto-approve
            terraform output -json > /tmp/workspace/tf-output.json
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - tf-output.json
  store_tf_output:
    docker:
      - image: google/cloud-sdk
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: set up google cloud sdk and copy tf output into bucket
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set project $GOOGLE_PROJECT_ID
            gsutil cp /tmp/workspace/tf-output.json gs://gcp-terraform-state-$GOOGLE_PROJECT_ID/tf-output.json
 
  deploy-rails:
    docker:
      - image: circleci/ruby:2.5.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "rails-example/Gemfile.lock" }}
            - v1-dependencies-
      - run:
          name: Install Ruby dependencies
          command: |
            cd rails-example
            BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ") gem install bundler
            bundle check || bundle install --deployment
      - save_cache:
          key: v1-dependencies-{{ checksum "rails-example/Gemfile.lock" }}
          paths:
            - rails-example/vendor/bundle
      - run:
          name: Setup Google Cloud SDK
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            export GCLOUD_SDK_VERSION=232
            curl https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-$GCLOUD_SDK_VERSION.0.0-linux-x86_64.tar.gz -o ./gcloud-sdk.tar.gz
            tar xzf gcloud-sdk.tar.gz -C ~
            rm gcloud-sdk.tar.gz
            export PATH=~/google-cloud-sdk/bin:$PATH
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set project $GOOGLE_PROJECT_ID
            echo 'export PATH=~/google-cloud-sdk/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: prepare app engine config, deploy, and run db migrations
          command: |
            if [ "${CIRCLE_BRANCH}" = "master" ] ; then
              export RAILS_ENV=production
              # This is kinda like google's default version naming
              export TARGET_VERSION=$(date +%Y%m%d)t$(printf "%05d" $(expr $(date +%s) % 86400))
              export TARGET_URL="https://rails-${GOOGLE_PROJECT_ID}.appspot.com/"
              export PROXY_URL="https://${GOOGLE_PROJECT_ID}.appspot.com/"
              export INSTANCES=2
            else
              export RAILS_ENV=${CIRCLE_BRANCH}
              export TARGET_VERSION=${CIRCLE_BRANCH}
              export TARGET_URL="https://${TARGET_VERSION}-dot-rails-dot-${GOOGLE_PROJECT_ID}.appspot.com/"
              export PROXY_URL="https://${TARGET_VERSION}-dot-${GOOGLE_PROJECT_ID}.appspot.com/"
              export INSTANCES=1
            fi

            # put the tf output into a variable so it doesn't hit the disk
            export TFOUTPUT=$(gsutil cp gs://gcp-terraform-state-$GOOGLE_PROJECT_ID/tf-output.json -)
            export SECRET_KEY_BASE=$(echo ${TFOUTPUT} | jq -r .rails_secret_${RAILS_ENV}.value)
            export CLOUDSQL_USERNAME=$(echo ${TFOUTPUT} | jq -r .postgres_username_${RAILS_ENV}.value)
            export CLOUDSQL_PASSWORD=$(echo ${TFOUTPUT} | jq -r .postgres_password_${RAILS_ENV}.value)
            export CONNECTION_NAME=$(echo ${TFOUTPUT} | jq -r .postgres_instance_${RAILS_ENV}.value)
            export SIGNATURE_KEY=$(echo ${TFOUTPUT} | jq -r .signature_key_${TARGET_ENV}.value)

            # set the google app engine config file up
            cat <<EOF > rails-example/app.yaml
            runtime: ruby
            env: flex
            secure: always
            redirect_http_response_code: 301
            service: rails
            automatic_scaling:
              min_num_instances: ${INSTANCES}

            env_variables:
              SECRET_KEY_BASE: "${SECRET_KEY_BASE}"
              CLOUDSQL_USERNAME: "${CLOUDSQL_USERNAME}"
              CLOUDSQL_PASSWORD: "${CLOUDSQL_PASSWORD}"
              CLOUDSQL_INSTANCE: "${CONNECTION_NAME}"
              SIGNATURE_KEY: "${SIGNATURE_KEY}"
              RAILS_ENV: "${RAILS_ENV}"
              BASICAUTH_PASSWORD: "${BASICAUTH_PASSWORD}"
              BASICAUTH_USER: "${BASICAUTH_USER}"
              IDP_PROVIDER_URL: "${IDP_PROVIDER_URL}"
              RAILS_LOG_TO_STDOUT: True
              RAILS_SERVE_STATIC_FILES: True
              RAILS_LOG_HEADERS: True
              PROXY_URL: "${PROXY_URL}"

            beta_settings:
              cloud_sql_instances: ${CONNECTION_NAME}
            EOF

            # do the deploy!
            cd rails-example
            bundle exec bin/rails assets:precompile
            gcloud app deploy -q --no-promote --version=${TARGET_VERSION}

            # Store info on what got deployed so we can test/promote it later on.
            mkdir /tmp/workspace
            echo ${TARGET_VERSION} > /tmp/workspace/rails_target_version
            echo ${TARGET_URL} > /tmp/workspace/rails_target_url
            echo ${SIGNATURE_KEY} > /tmp/workspace/rails_signature_key

            # do db creation/migration here
            bundle exec rake appengine:exec GAE_SERVICE=rails GAE_VERSION=${TARGET_VERSION} -- bundle exec rake db:create db:migrate

            # clean up old production versions (leave the last two, so you can roll back)
            VERSIONS=$(gcloud app versions list --service=rails --format=list | egrep -v '\/dev$|\/staging$' | sort -rn | tail -n +3 | sed 's/^.*\///') || true
            if [ ! -z ${VERSIONS} ] ; then
              gcloud app versions delete ${VERSIONS} || true
              echo cleaned up ${VERSIONS}
            else
              echo no versions to clean up
            fi
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - rails_target_version
            - rails_target_url
            - rails_signature_key
  test-rails:
    docker:
      - image: circleci/ruby:2.5.3-stretch
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Test the app!
          command: |
            export SIGNATURE_KEY=$(cat /tmp/workspace/rails_signature_key)
            export TOKEN="$(cat /proc/sys/kernel/random/uuid)_$(date +%s)"
            export HASHED_TOKEN=$(echo -n "${SIGNATURE_KEY}_${TOKEN}" | sha256sum | awk '{print $1}')
            export AUTH_HEADER="ZAP-Authorization"
            export AUTH_INFO="${HASHED_TOKEN}_${TOKEN}"

            echo "run tests here against $(cat /tmp/workspace/rails_target_url) with an ${AUTH_HEADER} header"
  owaspzap-rails:
    docker:
      - image: owasp/zap2docker-weekly
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Run OWASP Zap against the app! (fails if the test takes more than 30 minutes)
          no_output_timeout: 30m
          command: |
            # if we are in production, do not do form posts, because they can potentially create cruft in the db.
            if [ "${CIRCLE_BRANCH}" = "master" ] ; then
              export RAILS_ENV=production
              POSTFORM=false
            else
              POSTFORM=true
            fi

            # send special auth header that lets us scan
            export SIGNATURE_KEY=$(cat /tmp/workspace/rails_signature_key)
            export TOKEN="$(cat /proc/sys/kernel/random/uuid)_$(date +%s)"
            export HASHED_TOKEN=$(echo -n "${SIGNATURE_KEY}_${TOKEN}" | sha256sum | awk '{print $1}')
            export ZAP_CONFIG=" \
              -config globalexcludeurl.url_list.url\(0\).regex=.*/robots\.txt.* \
              -config globalexcludeurl.url_list.url\(0\).description='Exclude robots.txt' \
              -config globalexcludeurl.url_list.url\(0\).enabled=true \
              -config replacer.full_list\(0\).description='auth header for app' \
              -config replacer.full_list\(0\).enabled=true \
              -config replacer.full_list\(0\).matchtype=REQ_HEADER \
              -config replacer.full_list\(0\).matchstr=ZAP-Authorization \
              -config replacer.full_list\(0\).regex=false \
              -config replacer.full_list\(0\).replacement=${HASHED_TOKEN}_${TOKEN} \
              -config connection.defaultUserAgent='Mozilla/5.0 (Windows NT 6.3; WOW64; rv:39.0) Gecko/20100101 Firefox/39.0 ZAP/2.7' \
              -config spider.postform=${POSTFORM} \
            "

            zap-full-scan.py -m 5 -z "${ZAP_CONFIG}" -t "$(cat /tmp/workspace/rails_target_url)"
  deploy-ssoproxy:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Store Service Account key
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Setup Google Cloud SDK
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set project $GOOGLE_PROJECT_ID
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: prepare app engine config, build, deploy
          no_output_timeout: 30m
          command: |
            apt install -y jq
            # XXX should probably lock version or turn it into a submodule
            git clone https://github.com/timothy-spencer/oauth2_proxy-1 oauth2_proxy
            cd oauth2_proxy
            git checkout tspencerrepo

            # set defaults
            export TARGET_VERSION=${CIRCLE_BRANCH}
            export COOKIE_DOMAIN="${TARGET_VERSION}-dot-${GOOGLE_PROJECT_ID}.appspot.com"
            export TARGET_URL="https://${COOKIE_DOMAIN}/"
            export TARGET_ENV=${CIRCLE_BRANCH}
            export INSTANCES=1

            # override defaults depending on environment
            case "${CIRCLE_BRANCH}" in
            "master")
              # This is kinda like google's default version naming
              export TARGET_VERSION=$(date +%Y%m%d)t$(printf "%05d" $(expr $(date +%s) % 86400))
              export COOKIE_DOMAIN="${GOOGLE_PROJECT_ID}.appspot.com"
              export TARGET_URL="https://${COOKIE_DOMAIN}/"
              export TARGET_ENV=production
              export INSTANCES=2
              export IDP_CLIENT_ID=${IDP_CLIENT_ID_PRODUCTION}
              ;;
            "staging")
              export IDP_CLIENT_ID=${IDP_CLIENT_ID_STAGING}
              ;;
            "dev")
              export IDP_CLIENT_ID=${IDP_CLIENT_ID_DEV}
              ;;
            esac

            # put the tf output into a variable so it doesn't hit the disk
            export TFOUTPUT=$(gsutil cp gs://gcp-terraform-state-$GOOGLE_PROJECT_ID/tf-output.json -)

            # extract data for the app.yaml file
            export COOKIE_SECRET=$(echo ${TFOUTPUT} | jq -r .sso_cookie_secret_${TARGET_ENV}.value)
            export SIGNATURE_KEY=$(echo ${TFOUTPUT} | jq -r .signature_key_${TARGET_ENV}.value)
            export SOURCE="${TARGET_URL}"
            export DEST=$(cat /tmp/workspace/rails_target_url)
            echo ${TFOUTPUT} | jq -r .sso_key_${TARGET_ENV}.value > jwt_signing_key.pem

            cat <<EOF > app.yaml
            runtime: custom
            env: flex
            secure: always
            redirect_http_response_code: 301
            service: default
            automatic_scaling:
              min_num_instances: ${INSTANCES}

            env_variables:
              OAUTH2_PROXY_PROVIDER: login.gov
              OAUTH2_PROXY_HTTP_ADDRESS: 0.0.0.0:8080
              OAUTH2_PROXY_CLIENT_ID: ${IDP_CLIENT_ID}
              OAUTH2_PROXY_REDIRECT_URL: ${SOURCE}oauth2/callback
              OAUTH2_PROXY_OIDC_ISSUER_URL: ${IDP_PROVIDER_URL}
              OAUTH2_PROXY_EMAIL_DOMAINS: "${IDP_EMAIL_DOMAIN}"
              OAUTH2_PROXY_UPSTREAMS: ${DEST}
              OAUTH2_PROXY_PASS_HOST_HEADER: false
              OAUTH2_PROXY_SIGNATURE_KEY: "sha1:${SIGNATURE_KEY}"
              OAUTH2_PROXY_COOKIE_SECURE: true
              OAUTH2_PROXY_COOKIE_SECRET: "${COOKIE_SECRET}"
              OAUTH2_PROXY_COOKIE_DOMAIN: "${COOKIE_DOMAIN}"
              OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: true
              OAUTH2_PROXY_PROFILE_URL: "${IDP_PROFILE_URL}"
              OAUTH2_PROXY_JWT_KEY_FILE: /etc/ssl/private/jwt_signing_key.pem
              OAUTH2_PROXY_PUBJWK_URL: "${IDP_PUBKEY_URL}"
              OAUTH2_PROXY_GCP_HEALTHCHECKS: true
            EOF

            # deploy!
            gcloud app deploy -q --no-promote --version=${TARGET_VERSION}
            echo ${TARGET_VERSION} > /tmp/workspace/sso_target_version
            echo ${TARGET_URL} > /tmp/workspace/sso_target_url
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - sso_target_version
            - sso_target_url
  test-ssoproxy:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Run Tests!
          command: |
            echo "Need better tests!  Run a testing script here on $(cat /tmp/workspace/sso_target_url). XXX"
            echo testing if proxy is alive
            curl -f $(cat /tmp/workspace/sso_target_url)liveness_check | grep OK || exit 1
            echo testing if proxy is giving back an authorize redirect
            curl -f $(cat /tmp/workspace/sso_target_url) | grep authorize || exit 1
  promote-rails-prod:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          name: Store Service Account key
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Setup Google Cloud SDK
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set project $GOOGLE_PROJECT_ID
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Promote rails-example with sso to production
          no_output_timeout: 30m
          command: |
            # promote ssoproxy
            export VERSION=$(cat /tmp/workspace/sso_target_version)
            gcloud app services set-traffic default --splits ${VERSION}=1 --quiet
            echo promoted ${VERSION} to $(cat /tmp/workspace/sso_target_url)

            # promote rails
            export VERSION=$(cat /tmp/workspace/rails_target_version)
            gcloud app services set-traffic rails --splits ${VERSION}=1 --quiet
            echo promoted rails ${VERSION} to $(cat /tmp/workspace/rails_target_url)

            # clean up old versions (leave the last two, so you can roll back)
            echo cleaning up old versions
            VERSIONS=$(gcloud app versions list --service=default --format=list | egrep -v '\/dev$|\/staging$' | sort -rn | tail -n +3 | sed 's/^.*\///') || true
            if [ ! -z "${VERSIONS}" ] ; then
              gcloud app versions delete ${VERSIONS} --quiet || true
              echo cleaned up "${VERSIONS}"
            fi
            VERSIONS=$(gcloud app versions list --service=rails --format=list | egrep -v '\/dev$|\/staging$' | sort -rn | tail -n +3 | sed 's/^.*\///') || true
            if [ ! -z "${VERSIONS}" ] ; then
              gcloud app versions delete --service=rails ${VERSIONS} --quiet || true
              echo cleaned up rails "${VERSIONS}"
            fi            

  deploy-dotnet:
    docker:
      - image: gcr.io/google-appengine/aspnetcore:2.1.0
    steps:
      - checkout
      - run:
          name: Setup Google Cloud SDK
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            export GCLOUD_SDK_VERSION=232
            curl https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-$GCLOUD_SDK_VERSION.0.0-linux-x86_64.tar.gz -o ./gcloud-sdk.tar.gz
            tar xzf gcloud-sdk.tar.gz -C ~
            rm gcloud-sdk.tar.gz
            export PATH=~/google-cloud-sdk/bin:$PATH
            apt-get update
            apt install -y python python-dev python3 python3-dev python-pip git jq
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set project $GOOGLE_PROJECT_ID
            echo 'export PATH=~/google-cloud-sdk/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: prepare app engine config, build, deploy
          command: |
            cd dotnet-example

            if [ "${CIRCLE_BRANCH}" = "master" ] ; then
              export DEPLOY_ENV=production
              export INSTANCES=2
            else
              export DEPLOY_ENV=${CIRCLE_BRANCH}
              export INSTANCES=1
            fi

            # put the tf output into a variable so it doesn't hit the disk
            export TFOUTPUT=$(gsutil cp gs://gcp-terraform-state-$GOOGLE_PROJECT_ID/tf-output.json -)
            export CLOUDSQL_USERNAME=$(echo ${TFOUTPUT} | jq -r .postgres_username_${DEPLOY_ENV}.value)
            export CLOUDSQL_PASSWORD=$(echo ${TFOUTPUT} | jq -r .postgres_password_${DEPLOY_ENV}.value)
            export CONNECTION_NAME=$(echo ${TFOUTPUT} | jq -r .postgres_instance_${DEPLOY_ENV}.value)

            cat <<EOF > app.yaml
            runtime: aspnetcore
            env: flex
            secure: always
            redirect_http_response_code: 301
            service: dotnet-example
            automatic_scaling:
              min_num_instances: ${INSTANCES}

            env_variables:
              ASPNETCORE_DEPLOY_ENV: "${DEPLOY_ENV}"
              ASPNETCORE_BASICAUTH_USER: "${BASICAUTH_USER}"
              ASPNETCORE_BASICAUTH_PASSWORD: "${BASICAUTH_PASSWORD}"
              CUSTOMCONNSTR_postgres: Uid=${CLOUDSQL_USERNAME};Pwd=${CLOUDSQL_PASSWORD};Host=cloudsql;Database=dotnet-${DEPLOY_ENV}-visitors

            beta_settings:
              cloud_sql_instances: ${CONNECTION_NAME}=tcp:5432
            EOF

            # make sure database exists
            gcloud sql databases create dotnet-${DEPLOY_ENV}-visitors --instance ${DEPLOY_ENV} || true

            # deploy!  The app will automatically update it's schema.
            dotnet restore
            dotnet publish -c Release
            gcloud app deploy --no-promote --version=dotnet-${CIRCLE_BRANCH} ./bin/Release/netcoreapp2.1/publish/app.yaml
  test-dotnet:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Run Tests!
          command: echo "not tested! Run a testing script here. XXX"
  owaspzap-dotnet:
    docker:
      - image: owasp/zap2docker-weekly
    steps:
      - checkout
      - run:
          name: Run OWASP Zap against the app! (fails if the test takes more than 30 minutes)
          no_output_timeout: 30m
          command: |
            # if we are in production, do not do form posts, because they can potentially create cruft in the db.
            if [ "${CIRCLE_BRANCH}" = "master" ] ; then
              POSTFORM=false
            else
              POSTFORM=true
            fi

            export ZAP_CONFIG=" \
              -config globalexcludeurl.url_list.url\(0\).regex='.*/robots\.txt.*' \
              -config globalexcludeurl.url_list.url\(0\).description='Exclude robots.txt' \
              -config globalexcludeurl.url_list.url\(0\).enabled=true \
              -config spider.postform=${POSTFORM}"

            zap-full-scan.py -m 5 -z "${ZAP_CONFIG}" -t "https://dotnet-${CIRCLE_BRANCH}-dot-${GOOGLE_PROJECT_ID}.appspot.com/"



workflows:
  version: 2
  terraform:
    jobs:
      - enable_apis:
          filters:
            branches:
              only:
                # This is the list of branches which will trigger a terraform run.
                - master
                - staging
                - dev
      - plan_terraform:
          requires: 
            - enable_apis
      - hold_terraform:
          type: approval
          requires:
            - plan_terraform
      - apply_terraform:
          requires:
            - hold_terraform
      - store_tf_output:
          requires:
            - apply_terraform
  deploy-rails-example:
    jobs:
      - deploy-rails:
          filters:
            branches:
              only:
                # This is the list of branches which will be deployed automatically.
                # Only master gets promoted to the default production service.
                # Add more branches here if you want them automatically deployed.
                # Their RAILS_ENV will get set to the branch name.
                - master
                - staging
                - dev
      - test-rails:
          requires:
            - deploy-rails
      - owaspzap-rails:
          requires:
            - deploy-rails
      - deploy-ssoproxy:
          requires:
            - test-rails
      - test-ssoproxy:
          requires:
            - deploy-ssoproxy
      - promote-rails-prod:
          requires:
            - test-ssoproxy
          filters:
            branches:
              only:
                - master
  deploy-dotnet-example:
    jobs:
      - deploy-dotnet:
          filters:
            branches:
              only:
                # This is the list of branches which will be deployed automatically.
                # Add more branches here if you want them automatically deployed.
                - master
                - staging
                - dev
      - test-dotnet:
          requires:
            - deploy-dotnet
      - owaspzap-dotnet:
          requires:
            - deploy-dotnet
          filters:
            branches:
              only:
                # Do not run this against production, lest it fill it with garbage.
                - dev
                - staging
